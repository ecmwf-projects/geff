#!/usr/bin/env python

"""
Compress file(s) using fast LZ4 compression.

USAGE:

    lz4put SRC [SRC]... DEST

    SRC  -- input file
    DEST -- output file or directory

Copyright ECMWF 2018
"""

import os
import sys
import subprocess
import logging as log

class CmdError(Exception):
    pass

def main():
    log.basicConfig(format='%(levelname)s: %(message)s', level=log.INFO)
    if len(sys.argv[1:]) < 2:
        _usage()
        sys.exit(1)
    sources = sys.argv[1:-1]
    destination = sys.argv[-1]
    if len(sources) == 1:
        # We are compressing a single file.
        source = sources[0]
        if _is_dir(destination):
            destination = os.path.join(destination, os.path.basename(source) + '.lz4')
        sources_destinations = [(source, destination)]
    else:
        destination_dir = destination
        if os.path.isfile(os.path.normpath(destination_dir)):
            _abort('{} exists and is not a directory'.format(os.path.normpath(destination_dir)))
        sources_destinations = []
        for source in sources:
            destination = os.path.join(destination_dir, os.path.basename(source) + '.lz4')
            sources_destinations.append((source, destination))
    for s, d in sources_destinations:
        _run_lz4(s, d)

# helper functions

def _usage():
    print "USAGE: lz4put SRC [SRC]... DEST"

def _is_dir(path):
    return path.endswith('/') or os.path.isdir(path)

def _abort(msg, ret=1):
    log.error(os.path.basename(sys.argv[0]) + ': ' + msg.rstrip())
    sys.exit(ret)

def _run_lz4(src, dest):
    log.info('Compressing {} as {}'.format(src, dest))
    if os.path.isdir(src):
        _abort('{} is a directory'.format(src))
    output = subprocess.check_output(['lz4', '-f', src, dest], stderr=subprocess.STDOUT)
    if not 'Compressed' in output:
        log.error(output.strip())
        sys.exit(1)
    else:
        log.info(output.strip())

if __name__ == '__main__':
    main()
