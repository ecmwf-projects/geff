#!/usr/bin/env python3

import sys
import rasterio
import numpy
from argparse import ArgumentParser
from eccodes import *


def main():

    p = ArgumentParser()
    p.add_argument("--missing", choices=[None, "middle", "index"], default=None)
    p.add_argument("--index", help="value at index to set as missing value", default=-1)
    p.add_argument("--param", type=int, help="GRIB parameter identifier", default=-1)
    p.add_argument("--sample", help="GRIB sample", default="regular_ll_sfc_grib2")
    p.add_argument(
        "--geff",
        help="Map Koplen climate region values to GEFF values",
        action="store_true",
    )
    p.add_argument(
        "--area", nargs=4, help="N/W/S/E", metavar="A", default=[90, -180, -90, 180]
    )
    p.add_argument(
        "images", type=str, metavar="image", nargs="+", help="image to convert"
    )

    args = p.parse_args()
    print(args)

    for image in args.images:
        img = rasterio.open(image)

        ni, nj = (img.width, img.height)
        print("ni={}, nj={}".format(ni, nj))

        if hasattr(img, "bounds"):
            n, w, s, e = (
                img.bounds.top,
                img.bounds.left,
                img.bounds.bottom,
                img.bounds.right,
            )
            print("n={}, w={}, s={}, e={}".format(n, w, s, e))
        else:
            assert len(args.area) == 4
            n, w, s, e = args.area
        assert s < n and w < e

        # metadata
        h = codes_grib_new_from_samples(args.sample)
        if args.param >= 0:
            codes_set(h, "paramId", args.param)

        di = (e - w) / ni
        dj = (n - s) / nj

        codes_set(h, "Ni", ni)
        codes_set(h, "Nj", nj)
        codes_set(h, "iDirectionIncrementInDegrees", di)
        codes_set(h, "jDirectionIncrementInDegrees", dj)

        # bounding box (expanded)
        eps = 1 / (2 * codes_get(h, "angularPrecision"))
        codes_set(h, "latitudeOfFirstGridPointInDegrees", min(90, n + eps - dj / 2))
        codes_set(h, "latitudeOfLastGridPointInDegrees", max(-90, s - eps + dj / 2))
        codes_set(h, "longitudeOfFirstGridPointInDegrees", w - eps + di / 2)
        codes_set(h, "longitudeOfLastGridPointInDegrees", e + eps - di / 2)

        # set values, missing value(s)
        values = numpy.array(img.read(), dtype=numpy.float).flatten()

        if args.geff:
            missing = (
                codes_get(h, "missingValue") if codes_get(h, "bitmapPresent") else 0.0
            )
            geff = [
                0,
                4,  # Af, Tropical, rainforest
                4,  # Am, Tropical, monsoon
                4,  # Aw, Tropical, savannah
                1,  # BWh, Arid, desert, hot
                1,  # BWk, Arid, desert, cold
                1,  # BSh, Arid, steppe, hot
                1,  # BSk, Arid, steppe, cold
                3,  # Csa, Temperate, dry summer, hot summer
                3,  # Csb, Temperate, dry summer, warm summer
                3,  # Csc, Temperate, dry summer, cold summer
                3,  # Cwa, Temperate, dry winter, hot summer
                3,  # Cwb, Temperate, dry winter, warm summer
                3,  # Cwc, Temperate, dry winter, cold summer
                3,  # Cfa, Temperate, no dry season, hot summer
                3,  # Cfb, Temperate, no dry season, warm summer
                3,  # Cfc, Temperate, no dry season, cold summer
                2,  # Dsa, Cold, dry summer, hot summer
                2,  # Dsb, Cold, dry summer, warm summer
                2,  # Dsc, Cold, dry summer, cold summer
                2,  # Dsd, Cold, dry summer, very cold winter
                2,  # Dwa, Cold, dry winter, hot summer
                2,  # Dwb, Cold, dry winter, warm summer
                2,  # Dwc, Cold, dry winter, cold summer
                2,  # Dwd, Cold, dry winter, very cold winter
                2,  # Dfa, Cold, no dry season, hot summer
                2,  # Dfb, Cold, no dry season, warm summer
                2,  # Dfc, Cold, no dry season, cold summer
                2,  # Dfd, Cold, no dry season, very cold winter
                5,  # ET, Polar, tundra
                5,  # EF, Polar, frost
            ]
            values[:] = [missing if k < 1 or 30 < k else geff[int(k)] for k in values]

        if args.missing == "middle":
            codes_set(h, "missingValue", values[int(len(values) / 2)])
            codes_set(h, "bitmapPresent", 1)
        elif args.missing == "index":
            codes_set(h, "missingValue", values[args.index])
            codes_set(h, "bitmapPresent", 1)
        else:
            codes_set(h, "bitmapPresent", 0)

        codes_set_values(h, values)

        # write, close
        with open(image + (".grib", ".grib2")[codes_get(h, "edition") == 2], "wb") as f:
            codes_write(h, f)
        codes_release(h)


if __name__ == "__main__":
    sys.exit(main())
