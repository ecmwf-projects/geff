#!/bin/bash -l

%manual

Runs once a day to update the attached YMD variable.
The possible YMD date values are constrained to follow
the cron-like date pattern which is defined with the
'weekdays', 'monthdays' and 'months' ecFlow variables.

The value of the YMD variable is calculated as follows:

  1. the current system date is used as a base
  2. this base date is then shifted by 'base_shift' (number of days)
  3. if the shifted base date does not match the cron-like
     date pattern, it is replaced with the preceeding
     date from the cron-like date sequence.
  4. the date from step 3 is then shifted by 'seq_shift'
     (number of positions in the cron-like date sequence)

%end

%include <ecflow_bash.h>

module load comfies

# get system date (base)
base=$(date +%%Y%%m%%d)

# apply base_shift
base_shift=%base_shift:0%
shifted_base=$(newdate -D $base $base_shift)

# buld the date pattern string
weekdays='%weekdays:none%'
monthdays='%monthdays:none%'
months='%months:none%'
seq_pattern=''

if [[ $weekdays != none ]]; then
  seq_pattern="-w$weekdays"
fi
if [[ $monthdays != none ]]; then
  seq_pattern="$seq_pattern -d$monthdays"
fi
if [[ $months != none ]]; then
  seq_pattern="$seq_pattern -m$months"
fi

# normalize shifted_base to the preceeding date in the sequence
seq_date=$(calseq lsnap $seq_pattern $shifted_base)

# apply seq_shift to the normalized date
seq_shift=%seq_shift:0%
shifted_seq_date=$(calseq shift $seq_pattern $seq_date $seq_shift)

# update YMD variable
ecflow_client --alter change variable YMD $shifted_seq_date %ECF_NAME:0%

# display some info
ecflow_client --label=base $base
ecflow_client --label=base_shift $base_shift
ecflow_client --label=seq_pattern "$seq_pattern"
ecflow_client --label=seq_shift $seq_shift
ecflow_client --label=YMD $shifted_seq_date

sleep 10
